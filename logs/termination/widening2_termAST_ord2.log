
Abstract Syntax:
[ 1:]
void main( ):
[ 2:] while [ 3:] ( $1{x} < 0 || $1{x} > 0 ) do
[ 4:]   if ( $1{x} > 0 ) then
[ 5:]     $1{x} := $1{x} - 2
[ 6:]
        else
[ 7:]     $1{x} := $1{x} + 1
[ 8:]
        endif
[ 9:]
      od
[10:]

Forward Analysis:
[ 1:]: top
[ 2:]: top
[ 3:]: top
[ 4:]: top
[ 5:]: $1{x} >= 1
[ 6:]: $1{x} >= -1
[ 7:]: -$1{x} >= 0
[ 8:]: -$1{x} >= -1
[ 9:]: top
[10:]: $1{x} == 0

Backward Analysis:
[ 1:]: -$1{x} >= 2 ? -3$1{x}+1
$1{x} == -1 ? 4
$1{x} == 0 ? 1
$1{x} == 1 ? 7
$1{x} == 2 ? 4
$1{x} >= 3 ? 6$1{x}-8

[ 2:]: -$1{x} >= 2 ? -3$1{x}+1
$1{x} == -1 ? 4
$1{x} == 0 ? 1
$1{x} == 1 ? 7
$1{x} == 2 ? 4
$1{x} >= 3 ? 6$1{x}-8

[ 3:]: -$1{x} >= 2 ? -3$1{x}+1
$1{x} == -1 ? 4
$1{x} == 0 ? 1
$1{x} == 1 ? 7
$1{x} == 2 ? 4
$1{x} >= 3 ? 6$1{x}-8

[ 4:]: -$1{x} >= 3 ? -3$1{x}+0
$1{x} == -2 ? 6
$1{x} == -1 ? 3
$1{x} == 0 ? 9
$1{x} == 1 ? 6
$1{x} == 2 ? 3
$1{x} == 3 ? 9
$1{x} == 4 ? 6
$1{x} >= 5 ? 6$1{x}-18

[ 5:]: -$1{x} >= 0 ? -3$1{x}+8
$1{x} == 1 ? 5
$1{x} == 2 ? 2
$1{x} == 3 ? 8
$1{x} == 4 ? 5
$1{x} >= 5 ? 6$1{x}-19

[ 6:]: -$1{x} >= 2 ? -3$1{x}+1
$1{x} == -1 ? 4
$1{x} == 0 ? 1
$1{x} == 1 ? 7
$1{x} == 2 ? 4
$1{x} >= 3 ? 6$1{x}-8

[ 7:]: -$1{x} >= 3 ? -3$1{x}-1
$1{x} == -2 ? 5
$1{x} == -1 ? 2
$1{x} == 0 ? 8
$1{x} == 1 ? 5
$1{x} >= 2 ? 6$1{x}-1

[ 8:]: -$1{x} >= 2 ? -3$1{x}+1
$1{x} == -1 ? 4
$1{x} == 0 ? 1
$1{x} == 1 ? 7
$1{x} == 2 ? 4
$1{x} >= 3 ? 6$1{x}-8

[ 9:]: -$1{x} >= 2 ? -3$1{x}+1
$1{x} == -1 ? 4
$1{x} == 0 ? 1
$1{x} == 1 ? 7
$1{x} == 2 ? 4
$1{x} >= 3 ? 6$1{x}-8

[10:]: top ? 0.

Analysis Result: TRUE

Done.
