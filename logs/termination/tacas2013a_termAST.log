
Abstract Syntax:
[ 1:]
int main( ):
[ 2:] while [ 3:] ( $2{x} < 0 || $2{x} > 0 ) do
[ 4:]   if ( $2{x} > 0 ) then
[ 5:]     $2{x} := $2{x} - 1
[ 6:]
        else
[ 7:]     $2{x} := $2{x} + 1
[ 8:]
        endif
[ 9:]
      od
[10:] $1{$1} := 0
[11:] return
[12:]

Forward Analysis:
[ 1:]: top
[ 2:]: top
[ 3:]: top
[ 4:]: top
[ 5:]: $2{x} >= 1
[ 6:]: $2{x} >= 0
[ 7:]: -$2{x} >= 0
[ 8:]: -$2{x} >= -1
[ 9:]: top
[10:]: $2{x} == 0
[11:]: $2{x} == 0 && $1{$1} == 0
[12:]: bottom

Backward Analysis:
[ 1:]: -$2{x} >= 2 ? -3$2{x}+2
$2{x} == -1 ? 5
$2{x} == 0 ? 2
$2{x} == 1 ? 5
$2{x} >= 2 ? 3$2{x}+2

[ 2:]: -$2{x} >= 2 ? -3$2{x}+2
$2{x} == -1 ? 5
$2{x} == 0 ? 2
$2{x} == 1 ? 5
$2{x} >= 2 ? 3$2{x}+2

[ 3:]: -$2{x} >= 2 ? -3$2{x}+2
$2{x} == -1 ? 5
$2{x} == 0 ? 2
$2{x} == 1 ? 5
$2{x} >= 2 ? 3$2{x}+2

[ 4:]: -$2{x} >= 3 ? -3$2{x}+1
$2{x} == -2 ? 7
$2{x} == -1 ? 4
$2{x} == 0 ? 7
$2{x} == 1 ? 4
$2{x} == 2 ? 7
$2{x} >= 3 ? 3$2{x}+1

[ 5:]: -$2{x} >= 1 ? -3$2{x}+6
$2{x} == 0 ? 6
$2{x} == 1 ? 3
$2{x} == 2 ? 6
$2{x} >= 3 ? 3$2{x}+0

[ 6:]: -$2{x} >= 2 ? -3$2{x}+2
$2{x} == -1 ? 5
$2{x} == 0 ? 2
$2{x} == 1 ? 5
$2{x} >= 2 ? 3$2{x}+2

[ 7:]: -$2{x} >= 3 ? -3$2{x}+0
$2{x} == -2 ? 6
$2{x} == -1 ? 3
$2{x} == 0 ? 6
$2{x} >= 1 ? 3$2{x}+6

[ 8:]: -$2{x} >= 2 ? -3$2{x}+2
$2{x} == -1 ? 5
$2{x} == 0 ? 2
$2{x} == 1 ? 5
$2{x} >= 2 ? 3$2{x}+2

[ 9:]: -$2{x} >= 2 ? -3$2{x}+2
$2{x} == -1 ? 5
$2{x} == 0 ? 2
$2{x} == 1 ? 5
$2{x} >= 2 ? 3$2{x}+2

[10:]: top ? 1

[11:]: top ? 0.

[12:]: top ? 0.

Analysis Result: TRUE

Done.
