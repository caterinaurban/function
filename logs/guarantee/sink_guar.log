
Abstract Syntax:
[ 1:]
void main( ):
[ 2:] while [ 3:] ( true ) do
[ 4:]   $1{x} := ?
[ 5:]   while [ 6:] ( $1{x} < 0 || $1{x} > 0 ) do
[ 7:]     if ( $1{x} > 0 ) then
[ 8:]       $1{x} := $1{x} - 1
[ 9:]
          else
[10:]       $1{x} := $1{x} + 1
[11:]
          endif
[12:]
        od
[13:]
      od
[14:]

Property: $1{x} <= 0 && $1{x} >= 0

Forward Analysis:
[ 1:]: top
[ 2:]: top
[ 3:]: top
[ 4:]: top
[ 5:]: top
[ 6:]: top
[ 7:]: top
[ 8:]: $1{x} >= 1
[ 9:]: $1{x} >= 0
[10:]: -$1{x} >= 0
[11:]: -$1{x} >= -1
[12:]: top
[13:]: $1{x} == 0
[14:]: bottom

Backward Analysis:
[ 1:]:
-$1{x} >= 1 ?  (1)⍵ + 8
$1{x} == 0 ? 0.
$1{x} >= 1 ?  (1)⍵ + 8

[ 2:]:
-$1{x} >= 1 ?  (1)⍵ + 8
$1{x} == 0 ? 0.
$1{x} >= 1 ?  (1)⍵ + 8

[ 3:]:
-$1{x} >= 1 ?  (1)⍵ + 8
$1{x} == 0 ? 0.
$1{x} >= 1 ?  (1)⍵ + 8

[ 4:]:
-$1{x} >= 1 ?  (1)⍵ + 7
$1{x} == 0 ? 0.
$1{x} >= 1 ?  (1)⍵ + 7

[ 5:]:
-$1{x} >= 0 ? -3$1{x}+0
$1{x} >= 1 ? 3$1{x}+0

[ 6:]:
-$1{x} >= 0 ? -3$1{x}+0
$1{x} >= 1 ? 3$1{x}+0

[ 7:]:
-$1{x} >= 1 ? -3$1{x}-1
$1{x} == 0 ? 0.
$1{x} >= 1 ? 3$1{x}-1

[ 8:]:
-$1{x} >= 1 ? -3$1{x}+4
$1{x} == 0 ? 0.
$1{x} >= 1 ? 3$1{x}-2

[ 9:]:
-$1{x} >= 0 ? -3$1{x}+0
$1{x} >= 1 ? 3$1{x}+0

[10:]:
-$1{x} >= 1 ? -3$1{x}-2
$1{x} == 0 ? 0.
$1{x} >= 1 ? 3$1{x}+4

[11:]:
-$1{x} >= 0 ? -3$1{x}+0
$1{x} >= 1 ? 3$1{x}+0

[12:]:
-$1{x} >= 0 ? -3$1{x}+0
$1{x} >= 1 ? 3$1{x}+0

[13:]:
-$1{x} >= 1 ?  (1)⍵ + 8
$1{x} == 0 ? 0.
$1{x} >= 1 ?  (1)⍵ + 8

[14:]:
-$1{x} >= 1 ? bottom
$1{x} == 0 ? 0.
$1{x} >= 1 ? bottom

Analysis Result: TRUE

Done.
